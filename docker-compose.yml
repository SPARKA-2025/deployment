version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: sparka-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${DB_DATABASE:-sparka_db}
      MYSQL_USER: ${DB_USERNAME:-sparka_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sparka123}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache (Optional - can be disabled)
  redis:
    image: redis:7-alpine
    container_name: sparka-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # SPARKA Backend (Laravel) - Development Mode
  sparka-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: sparka-backend
    restart: unless-stopped
    environment:
      - APP_ENV=development
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-sparka_db}
      - DB_USERNAME=${DB_USERNAME:-sparka_user}
      - DB_PASSWORD=${DB_PASSWORD:-sparka123}
      - CACHE_DRIVER=file
      - SESSION_DRIVER=file
      - QUEUE_CONNECTION=database
      - STREAMING_API_URL=http://sparka-streaming:8010
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_storage:/var/www/html/storage
      - backend_uploads:/var/www/html/public/uploads
      - ../backend:/var/www/html:cached
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # SPARKA Frontend (Next.js)
  sparka-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: sparka-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://sparka-backend:8000/api
      - NEXT_PUBLIC_API_INTERNAL_URL=http://sparka-backend:8000/api
      - NEXT_PUBLIC_STREAMING_URL=http://sparka-streaming:8010
      - NEXT_PUBLIC_STREAMING_INTERNAL_URL=http://sparka-streaming:8010
      - NEXT_PUBLIC_BASE_URL=http://localhost:3000
      - NEXT_PUBLIC_WS_URL=ws://sparka-streaming:8010
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ../frontend:/app:cached
      - /app/node_modules
      - /app/.next
    depends_on:
      - sparka-backend
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # SPARKA Streaming Server (Node.js)
  sparka-streaming:
    build:
      context: ./streaming-server
      dockerfile: Dockerfile
    container_name: sparka-streaming
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - PORT=8010
      - REDIS_HOST=redis
    ports:
      - "${STREAMING_PORT:-8010}:8010"
      - "${STREAMING_WS_PORT:-8011}:8011"
    volumes:
      - streaming_data:/app/public/streams
      - streaming_logs:/app/logs
      - ./streaming-server:/app:cached
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://127.0.0.1:8010/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # SPARKA Integration Service
  sparka-integration:
    build:
      context: .
      dockerfile: Dockerfile.sparka-integration
    container_name: sparka-integration
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - BACKEND_URL=http://sparka-backend:8000
      - REDIS_URL=redis://redis:6379/0
      - AUTO_EXIT_TIMEOUT_SECONDS=300
      - PORT=8004
    ports:
      - "${INTEGRATION_PORT:-8004}:8004"
    volumes:
      - ./logs/sparka-integration:/app/logs
      - ./uploads:/app/uploads
      - ./temp_uploads:/app/temp_uploads
      - ./debug_frames:/app/debug_frames
    depends_on:
      sparka-backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sparka-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sparka-backend
      - sparka-frontend
      - sparka-streaming
      - sparka-integration
    networks:
      - sparka-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  backend_uploads:
    driver: local
  streaming_data:
    driver: local
  streaming_logs:
    driver: local

networks:
  sparka-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16