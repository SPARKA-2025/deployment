version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: sparka-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${DB_DATABASE:-sparka_db}
      MYSQL_USER: ${DB_USERNAME:-sparka_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sparka123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sparka-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # SPARKA Backend (Laravel) - Development Mode
  sparka-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: sparka-backend-dev
    restart: unless-stopped
    environment:
      - APP_ENV=development
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-sparka_db}
      - DB_USERNAME=${DB_USERNAME:-sparka_user}
      - DB_PASSWORD=${DB_PASSWORD:-sparka123}
      - REDIS_HOST=redis
      - STREAMING_API_URL=http://sparka-streaming-dev:8010
      - CACHE_DRIVER=file
      - SESSION_DRIVER=file
      - QUEUE_CONNECTION=database
    ports:
      - "8005:8000"
    volumes:
      - backend_storage_dev:/var/www/html/storage
      - backend_uploads_dev:/var/www/html/public/uploads
      - ../backend:/var/www/html:cached
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/ai/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # SPARKA Frontend (Next.js) - Development Mode
  sparka-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: sparka-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8005/api
      - NEXT_PUBLIC_API_INTERNAL_URL=http://sparka-backend-dev:8000/api
      - API_URL=http://sparka-backend-dev:8000/api
      - NEXT_PUBLIC_STREAMING_URL=http://localhost/streaming
      - NEXT_PUBLIC_STREAMING_INTERNAL_URL=http://sparka-streaming-dev:8010
      - NEXT_PUBLIC_BASE_URL=http://localhost
      - NEXT_PUBLIC_WS_URL=ws://localhost/streaming
      - NEXT_TELEMETRY_DISABLED=1
    ports:
      - "3005:3000"
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/public:/app/public
      - ../frontend/package.json:/app/package.json:ro
      - ../frontend/package-lock.json:/app/package-lock.json:ro
      - ../frontend/next.config.mjs:/app/next.config.mjs:ro
      - ../frontend/tailwind.config.js:/app/tailwind.config.js:ro
      - ../frontend/postcss.config.js:/app/postcss.config.js:ro
      - ../frontend/jsconfig.json:/app/jsconfig.json:ro
    depends_on:
      - sparka-backend
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # SPARKA Streaming Server (Node.js)
  sparka-streaming:
    build:
      context: ./streaming-server
      dockerfile: Dockerfile
    container_name: sparka-streaming-dev
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - PORT=8010
      - NODE_ENV=development
    ports:
      - "8010:8010"
      - "8011:8011"
    volumes:
      - streaming_data_dev:/app/public/streams
      - streaming_logs_dev:/app/logs
      - ./streaming-server/streams:/app/streams
      - ./streaming-server/public:/app/public
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://127.0.0.1:8010/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: sparka-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data_dev:/data
    command: server /data --console-address ":9001"
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 10s
      retries: 5

  # MinIO Service
  minio-service:
    build:
      context: ./http/minio
      dockerfile: Dockerfile
    container_name: sparka-minio-service-dev
    restart: unless-stopped
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    ports:
      - "5001:5001"
    depends_on:
      - minio
    networks:
      - sparka-dev-network

  # SPARKA Integration Service
  sparka-integration:
    build:
      context: .
      dockerfile: Dockerfile.sparka-integration
    container_name: sparka-integration-dev
    restart: unless-stopped
    environment:
      - BACKEND_URL=http://sparka-backend-dev:8000
      - REDIS_URL=redis://redis:6379/0
      - AUTO_EXIT_TIMEOUT_SECONDS=300
      - PORT=8030
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - AI_API_HOST=sparka-server-api-dev
      - AI_API_PORT=5000
      - AI_API_URL=http://sparka-server-api-dev:5000
    ports:
      - "8030:8030"
    volumes:
      - ./logs/sparka-integration:/app/logs
      - ./uploads:/app/uploads
      - ./temp_uploads:/app/temp_uploads
      - ./debug_frames:/app/debug_frames
    depends_on:
      sparka-backend:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      sparka-server-api:
        condition: service_healthy
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/health"]
      timeout: 10s
      retries: 5
      start_period: 30s



  # gRPC OCR Service
  grpc-ocr:
    build:
      context: ./rpc/grpc-ocr
      dockerfile: Dockerfile
    container_name: sparka-grpc-ocr-dev
    restart: unless-stopped
    ports:
      - "50051:50052"
    volumes:
      - ./logs/grpc-ocr:/app/logs
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; import plate_text_extraction_pb2_grpc; channel = grpc.insecure_channel('localhost:50051'); stub = plate_text_extraction_pb2_grpc.PlateTextExtractionStub(channel); print('OK')"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # gRPC Plate Detection Service
  grpc-plate:
    build:
      context: ./rpc/grpc-plate
      dockerfile: Dockerfile
    container_name: sparka-grpc-plate-dev
    restart: unless-stopped
    ports:
      - "50052:50053"
    volumes:
      - ./logs/grpc-plate:/app/logs
      - ./models/plate:/app/model
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; import detection_pb2_grpc; channel = grpc.insecure_channel('localhost:50052'); stub = detection_pb2_grpc.PlateDetectionStub(channel); print('OK')"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # gRPC Vehicle Detection Service
  grpc-vehicle:
    build:
      context: ./rpc/grpc-vehicle
      dockerfile: Dockerfile
    container_name: sparka-grpc-vehicle-dev
    restart: unless-stopped
    ports:
      - "50053:50051"
    volumes:
      - ./logs/grpc-vehicle:/app/logs
      - ./models/vehicle:/app/model
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; import vehicle_detection_pb2_grpc; channel = grpc.insecure_channel('localhost:50053'); stub = vehicle_detection_pb2_grpc.VehicleDetectionStub(channel); print('OK')"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # SPARKA Server API
  sparka-server-api:
    build:
      context: ./http/sparka-server-api
      dockerfile: Dockerfile
    container_name: sparka-server-api-dev
    restart: unless-stopped
    environment:
      - GRPC_OCR_HOST=sparka-grpc-ocr-dev
      - GRPC_OCR_PORT=50052
      - GRPC_PLATE_HOST=sparka-grpc-plate-dev
      - GRPC_PLATE_PORT=50053
      - GRPC_VEHICLE_HOST=sparka-grpc-vehicle-dev
      - GRPC_VEHICLE_PORT=50051
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - ./saved_images:/app/saved_images
    depends_on:
      grpc-ocr:
        condition: service_healthy
      grpc-plate:
        condition: service_healthy
      grpc-vehicle:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: sparka-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: sparka
      RABBITMQ_DEFAULT_PASS: sparka123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 10s
      retries: 5

  # InfluxDB for Time Series Data
  influxdb:
    image: influxdb:2.7
    container_name: sparka-influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: admin123
      DOCKER_INFLUXDB_INIT_ORG: sparka
      DOCKER_INFLUXDB_INIT_BUCKET: sparka_bucket
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: sparka-token-123
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data_dev:/var/lib/influxdb2
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      timeout: 10s
      retries: 5

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: sparka-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data_dev:/var/lib/grafana
    networks:
      - sparka-dev-network
    depends_on:
      - influxdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      timeout: 10s
      retries: 5

  # InfluxDB Service
  influxdb-service:
    build:
      context: ./http/influxDB
      dockerfile: Dockerfile
    container_name: sparka-influxdb-service-dev
    restart: unless-stopped
    environment:
      - PORT=5003
    ports:
      - "5003:5003"
    networks:
      - sparka-dev-network

  # Auth Service
  auth-service:
    build:
      context: ./http/auth-service
      dockerfile: Dockerfile
    container_name: sparka-auth-service-dev
    restart: unless-stopped
    environment:
      - PORT=5004
    ports:
      - "5004:5004"
    networks:
      - sparka-dev-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sparka-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - sparka-backend
      - sparka-frontend
      - sparka-streaming
      - sparka-integration
      - sparka-server-api
    networks:
      - sparka-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      timeout: 10s
      retries: 5

volumes:
  mysql_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  backend_storage_dev:
    driver: local
  backend_uploads_dev:
    driver: local
  streaming_data_dev:
    driver: local
  streaming_logs_dev:
    driver: local
  minio_data_dev:
    driver: local
  rabbitmq_data_dev:
    driver: local
  influxdb_data_dev:
    driver: local
  grafana_data_dev:
    driver: local

networks:
  sparka-dev-network:
    driver: bridge